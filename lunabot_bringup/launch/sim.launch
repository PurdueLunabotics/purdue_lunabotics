<?xml version="1.0"?>
<launch>

  <!-- Set the arena to either KSC or UCF arena based on the boolean argument. -->
  <arg name="KSC_arena" default="true"/>

  <!-- Values for arena world (Nasa is KSC, UCF is not.) The above boolean argument changes what arg is passed to the launch file below (therefore, there are two duplicate launch files)
  $(find mining_arena_gazebo)/worlds/arena_nasa.world
  $(find mining_arena_gazebo)/worlds/arena_ucf.world -->


  <arg name="initial_pose" default="-x 1.0 -y -1.3 -z 0"/>
  <arg name="model" default="$(find dummy_bot_description)/urdf/dummy_bot.xacro"/>

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="rviz" default="true"/>
  <arg name="verbose" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="paused" default="false"/>
  <arg name="point_cloud_topic" default="/point_cloud"/>

  <!-- sim config -->
  <rosparam file="$(find lunabot_config)/config/sim.yml" command="load" />

  <!--rviz -->
  <include file="$(find dummy_bot_description)/launch/display.launch" if="$(arg rviz)"/>

  <!-- gazebo -->
  <param command="$(find xacro)/xacro $(arg model)" name="robot_description"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- KSC Arena -->
  <include file="$(find mining_arena_gazebo)/launch/gazebo.launch" if="$(arg KSC_arena)">
    <arg name="world_name" value="$(find mining_arena_gazebo)/worlds/arena_nasa.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="initial_pose" value="$(arg initial_pose)"/>
  </include>

  <!-- UCF Arena -->
  <include file="$(find mining_arena_gazebo)/launch/gazebo.launch" unless="$(arg KSC_arena)">
    <arg name="world_name" value="$(find mining_arena_gazebo)/worlds/arena_ucf.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="initial_pose" value="$(arg initial_pose)"/>
  </include>

  <!-- cameras -->
  <include file="$(find lunabot_perception)/launch/cameras.launch">
    <arg name="sim" value="true"/>
  </include>


  <!-- navigation -->
  <group ns="nav">
      <node pkg="lunabot_control" type="mpc_node" name="mpc_node" output="screen"/>

      <node name="dstar_node" pkg="lunabot_nav" type="dstar_node.py" output="screen" respawn="true"/>
  </group>

  <!-- mapping -->
  <group ns="maps">
      <node name="costmap_node" pkg="lunabot_perception" type="costmap_node" output="screen">
          <rosparam file="$(find lunabot_config)/config/global_costmap_sim.yml" command="load" ns="global_costmap" />
      </node>
  </group>

  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
      <rosparam file="$(find lunabot_config)/config/octomap.yml" command="load" />
      <!-- data source to integrate (PointCloud2) -->
      <remap from="cloud_in" to="$(arg point_cloud_topic)" />
  </node>

  <node name="points_concat" pkg="lunabot_perception" type="points_concat" output="screen">
      <remap to="/depth_topics" from="~input_topics" />
      <remap to="/depth_frame_id" from="~output_frame_id" />
      <remap to="/pc_topic" from="~output_topic" />
  </node>

</launch>
